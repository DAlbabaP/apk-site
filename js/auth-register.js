/**
 * –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 * –¢–æ–ª—å–∫–æ API, –±–µ–∑ localStorage
 * –°–æ–∑–¥–∞–Ω–æ: 2025-06-16
 */

class RegisterManager {
    constructor() {
        this.form = null;
        this.isLoading = false;
        this.validationTimers = new Map();
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.form = document.getElementById('registerForm');
        if (!this.form) {
            console.error('Register form not found');
            return;
        }

        this.setupEventListeners();
        this.setupPhoneMask();
        this.checkExistingAuth();
        this.focusFirstField();
    }    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkExistingAuth() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        // —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        console.log('üîç Checking existing auth on register page...');
        try {
            if (window.AuthManager && AuthManager.isAuthenticated()) {
                const user = AuthManager.getCurrentUser();
                console.log('‚ö†Ô∏è User already authenticated:', user?.username, 'role:', user?.role);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                this.showExistingAuthWarning(user);
            }
        } catch (error) {
            console.log('AuthManager not ready yet, skipping auth check');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    showExistingAuthWarning(user) {
        const warningHtml = `
            <div class="existing-auth-warning" style="
                margin-bottom: 20px; 
                padding: 15px; 
                background: linear-gradient(135deg, rgba(255, 152, 0, 0.1), rgba(255, 193, 7, 0.1)); 
                border: 1px solid rgba(255, 152, 0, 0.3);
                border-radius: 8px; 
                text-align: center;
            ">
                <h4 style="color: #F57C00; margin-bottom: 10px; font-size: 14px;">‚ö†Ô∏è –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</h4>
                <p style="margin: 5px 0; font-size: 13px;">
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <strong>${user.username}</strong> (${user.role})
                </p>
                <div style="margin-top: 10px;">
                    <button type="button" id="goToDashboard" style="
                        padding: 8px 16px; 
                        background: #4CAF50; 
                        color: white; 
                        border: none; 
                        border-radius: 4px; 
                        cursor: pointer; 
                        margin-right: 10px;
                        font-size: 12px;
                    ">
                        –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å
                    </button>
                    <button type="button" id="logoutAndStay" style="
                        padding: 8px 16px; 
                        background: #f44336; 
                        color: white; 
                        border: none; 
                        border-radius: 4px; 
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        –í—ã–π—Ç–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    </button>
                </div>
            </div>
        `;
        
        this.form.insertAdjacentHTML('beforebegin', warningHtml);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        document.getElementById('goToDashboard')?.addEventListener('click', () => {
            this.redirectToUserDashboard(user.role);
        });
        
        document.getElementById('logoutAndStay')?.addEventListener('click', () => {
            AuthManager.logout();
            // –ü–æ—Å–ª–µ logout –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            window.location.reload();
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.setupFieldValidation('fullName', this.validateFullName.bind(this));
        this.setupFieldValidation('login', this.validateLogin.bind(this), true); // —Å debounce
        this.setupFieldValidation('email', this.validateEmail.bind(this), true); // —Å debounce
        this.setupFieldValidation('phone', this.validatePhone.bind(this));
        this.setupFieldValidation('password', this.validatePassword.bind(this));
        this.setupFieldValidation('confirmPassword', this.validateConfirmPassword.bind(this));

        // –°–º–µ–Ω–∞ —Ä–æ–ª–∏
        const roleSelect = document.getElementById('role');
        if (roleSelect) {
            roleSelect.addEventListener('change', () => this.handleRoleChange());
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        this.setupFieldValidation('department', this.validateRequired.bind(this));
        this.setupFieldValidation('position', this.validateRequired.bind(this));
        this.setupFieldValidation('positionCode', this.validateRequired.bind(this));
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è
    setupFieldValidation(fieldId, validator, useDebounce = false) {
        const field = document.getElementById(fieldId);
        if (!field) return;

        const handler = useDebounce 
            ? this.debounce((e) => validator(e.target), 500)
            : (e) => validator(e.target);

        field.addEventListener('input', handler);
        field.addEventListener('blur', (e) => validator(e.target));
    }

    // Debounce —Ñ—É–Ω–∫—Ü–∏—è
    debounce(func, wait) {
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(this.timeout);
                func(...args);
            };
            clearTimeout(this.timeout);
            this.timeout = setTimeout(later, wait);
        };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async handleSubmit(e) {
        e.preventDefault();
        
        if (this.isLoading) return;

        const isValid = await this.validateAllFields();
        if (!isValid) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
            return;
        }

        const formData = this.getFormData();
        await this.performRegistration(formData);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    getFormData() {
        const formData = new FormData(this.form);
        const fullName = formData.get('fullName')?.trim() || '';
        const nameParts = fullName.split(/\s+/).filter(part => part.length > 0);

        return {
            username: formData.get('login')?.trim() || '',
            email: formData.get('email')?.trim() || '',
            password: formData.get('password') || '',
            first_name: nameParts[1] || nameParts[0] || '', // –ò–º—è
            last_name: nameParts[0] || '', // –§–∞–º–∏–ª–∏—è
            role: formData.get('role') || 'user',
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            phone: formData.get('phone')?.replace(/\D/g, '') || '',
            department: formData.get('department')?.trim() || '',
            position: formData.get('position')?.trim() || '',
            positionCode: formData.get('positionCode')?.trim() || ''
        };
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async performRegistration(userData) {
        this.setLoadingState(true);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å AuthManager
            if (!window.AuthManager) {
                throw new Error('–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            }

            console.log('üìù Attempting registration for user:', userData.username);
            
            const response = await AuthManager.register(userData);
            
            console.log('‚úÖ Registration successful:', response);

            this.showSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
              // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            setTimeout(() => {
                window.location.href = 'login.html';
            }, 2000);

        } catch (error) {
            console.error('‚ùå Registration failed:', error.message);
            this.handleRegistrationError(error);
        } finally {
            this.setLoadingState(false);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    handleRegistrationError(error) {
        let message = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';

        if (error.message.includes('already exists') || error.message.includes('User already exists')) {
            message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        } else if (error.message.includes('Invalid')) {
            message = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é';
        } else if (error.message.includes('Network')) {
            message = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
        } else if (error.message) {
            message = error.message;
        }

        this.showError(message);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    async validateAllFields() {
        const validations = [
            this.validateFullName(document.getElementById('fullName')),
            this.validateLogin(document.getElementById('login')),
            this.validateEmail(document.getElementById('email')),
            this.validatePhone(document.getElementById('phone')),
            this.validatePassword(document.getElementById('password')),
            this.validateConfirmPassword(document.getElementById('confirmPassword')),
            this.validateRole()
        ];

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const roleSelect = document.getElementById('role');
        if (roleSelect?.value === 'manager') {
            validations.push(
                this.validateRequired(document.getElementById('department')),
                this.validateRequired(document.getElementById('position')),
                this.validateRequired(document.getElementById('positionCode'))
            );
        }

        const results = await Promise.all(validations);
        return results.every(result => result === true);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    validateFullName(field) {
        if (!field) return false;

        const value = field.value.trim();
        const errorId = 'fullNameError';

        if (!value) {
            this.showFieldError(errorId, '–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            this.setFieldState(field, 'error');
            return false;
        }

        const nameParts = value.split(/\s+/).filter(part => part.length > 0);
        if (nameParts.length < 2) {
            this.showFieldError(errorId, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è');
            this.setFieldState(field, 'error');
            return false;
        }

        if (value.length < 5) {
            this.showFieldError(errorId, '–§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ');
            this.setFieldState(field, 'error');
            return false;
        }

        this.hideFieldError(errorId);
        this.setFieldState(field, 'success');
        return true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
    async validateLogin(field) {
        if (!field) return false;

        const value = field.value.trim();
        const errorId = 'loginError';

        if (!value) {
            this.showFieldError(errorId, '–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            this.setFieldState(field, 'error');
            return false;
        }

        if (!/^[a-zA-Z0-9_\-]+$/.test(value)) {
            this.showFieldError(errorId, '–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ');
            this.setFieldState(field, 'error');
            return false;
        }

        if (value.length < 3) {
            this.showFieldError(errorId, '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤');
            this.setFieldState(field, 'error');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API
            if (!window.api) {
                this.hideFieldError(errorId);
                this.setFieldState(field, 'success');
                return true; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ API –Ω–µ –≥–æ—Ç–æ–≤
            }

            this.showFieldError(errorId, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...');
            this.setFieldState(field, 'checking');

            // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å dummy –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            await api.post('/login', { login: value, password: 'dummy_check_12345' });
            
            // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            this.showFieldError(errorId, '–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç');
            this.setFieldState(field, 'error');
            return false;

        } catch (error) {
            if (error.message.includes('Invalid credentials')) {
                // –õ–æ–≥–∏–Ω —Å–≤–æ–±–æ–¥–µ–Ω
                this.hideFieldError(errorId);
                this.showFieldSuccess('loginSuccess', '–õ–æ–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω');
                this.setFieldState(field, 'success');
                return true;
            } else {
                // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                this.showFieldError(errorId, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞');
                this.setFieldState(field, 'error');
                return false;
            }
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    validateEmail(field) {
        if (!field) return false;

        const value = field.value.trim();
        const errorId = 'emailError';

        if (!value) {
            this.showFieldError(errorId, 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            this.setFieldState(field, 'error');
            return false;
        }

        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
            this.showFieldError(errorId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
            this.setFieldState(field, 'error');
            return false;
        }

        this.hideFieldError(errorId);
        this.setFieldState(field, 'success');
        return true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    validatePhone(field) {
        if (!field) return false;

        const value = field.value.replace(/\D/g, '');
        const errorId = 'phoneError';

        if (!value) {
            this.showFieldError(errorId, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            this.setFieldState(field, 'error');
            return false;
        }

        if (value.length !== 11) {
            this.showFieldError(errorId, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä');
            this.setFieldState(field, 'error');
            return false;
        }

        this.hideFieldError(errorId);
        this.setFieldState(field, 'success');
        return true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    validatePassword(field) {
        if (!field) return false;

        const value = field.value;
        const errorId = 'passwordError';

        if (!value) {
            this.showFieldError(errorId, '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            this.setFieldState(field, 'error');
            return false;
        }

        if (value.length < 6) {
            this.showFieldError(errorId, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
            this.setFieldState(field, 'error');
            return false;
        }

        this.hideFieldError(errorId);
        this.setFieldState(field, 'success');
        
        // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const confirmField = document.getElementById('confirmPassword');
        if (confirmField?.value) {
            this.validateConfirmPassword(confirmField);
        }
        
        return true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    validateConfirmPassword(field) {
        if (!field) return false;

        const value = field.value;
        const password = document.getElementById('password')?.value || '';
        const errorId = 'confirmPasswordError';

        if (!value) {
            this.showFieldError(errorId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            this.setFieldState(field, 'error');
            return false;
        }

        if (value !== password) {
            this.showFieldError(errorId, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            this.setFieldState(field, 'error');
            return false;
        }

        this.hideFieldError(errorId);
        this.setFieldState(field, 'success');
        return true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
    validateRole() {
        const roleSelect = document.getElementById('role');
        if (!roleSelect) return false;

        const value = roleSelect.value;
        const errorId = 'roleError';

        if (!value) {
            this.showFieldError(errorId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å');
            return false;
        }

        this.hideFieldError(errorId);
        return true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
    validateRequired(field) {
        if (!field) return false;

        const value = field.value.trim();
        const fieldName = field.getAttribute('placeholder') || field.name || '–ü–æ–ª–µ';
        const errorId = field.id + 'Error';

        if (!value) {
            this.showFieldError(errorId, `${fieldName} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
            this.setFieldState(field, 'error');
            return false;
        }

        this.hideFieldError(errorId);
        this.setFieldState(field, 'success');
        return true;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
    handleRoleChange() {
        const roleSelect = document.getElementById('role');
        const managerFields = document.getElementById('managerFields');
        
        if (!roleSelect || !managerFields) return;

        if (roleSelect.value === 'manager') {
            managerFields.classList.add('show');
            // –î–µ–ª–∞–µ–º –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏
            ['department', 'position', 'positionCode'].forEach(id => {
                const field = document.getElementById(id);
                if (field) field.required = true;
            });
        } else {
            managerFields.classList.remove('show');
            // –£–±–∏—Ä–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—á–∏—â–∞–µ–º
            ['department', 'position', 'positionCode'].forEach(id => {
                const field = document.getElementById(id);
                if (field) {
                    field.required = false;
                    field.value = '';
                    this.setFieldState(field, 'normal');
                    this.hideFieldError(id + 'Error');
                }
            });
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    setupPhoneMask() {
        const phoneField = document.getElementById('phone');
        if (!phoneField) return;

        phoneField.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, '');
            
            if (value.startsWith('8')) {
                value = '7' + value.slice(1);
            }
            
            if (value.startsWith('7')) {
                value = value.slice(0, 11);
                const formatted = value.replace(/(\d{1})(\d{3})(\d{3})(\d{2})(\d{2})/, '+$1 ($2) $3-$4-$5');
                e.target.value = formatted;
            }
        });
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—è
    setFieldState(field, state) {
        if (!field) return;

        field.classList.remove('error', 'success', 'checking');
        
        if (state === 'error' || state === 'success' || state === 'checking') {
            field.classList.add(state);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—è
    showFieldError(errorId, message) {
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.classList.add('show');
        }
    }

    // –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—è
    hideFieldError(errorId) {
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
            errorElement.textContent = '';
            errorElement.classList.remove('show');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö –ø–æ–ª—è
    showFieldSuccess(successId, message) {
        const successElement = document.getElementById(successId);
        if (successElement) {
            successElement.textContent = message;
            successElement.classList.add('show');
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setLoadingState(loading) {
        this.isLoading = loading;
        
        const submitBtn = document.getElementById('submitBtn');
        const spinner = document.getElementById('loadingSpinner');
        
        if (submitBtn) {
            submitBtn.disabled = loading;
        }
        
        if (spinner) {
            spinner.style.display = loading ? 'inline-block' : 'none';
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –æ—à–∏–±–∫—É
    showError(message) {
        if (window.Utils?.showNotification) {
            Utils.showNotification(message, 'error');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —É—Å–ø–µ—Ö
    showSuccess(message) {
        if (window.Utils?.showNotification) {
            Utils.showNotification(message, 'success');
        }
    }    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥
    redirectToUserDashboard(role) {
        const dashboardUrls = {
            'admin': 'dashboard-admin.html',
            'manager': 'dashboard-manager.html',
            'user': 'dashboard-user.html'
        };

        const targetUrl = dashboardUrls[role] || dashboardUrls.user;
        window.location.href = targetUrl;
    }

    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    focusFirstField() {
        setTimeout(() => {
            const firstField = document.getElementById('fullName');
            if (firstField) {
                firstField.focus();
            }
        }, 100);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AuthManager
function waitForAuthManager() {
    return new Promise((resolve) => {
        if (window.AuthManager && window.api) {
            resolve();
        } else {
            console.log('‚è≥ Waiting for AuthManager...');
            setTimeout(() => waitForAuthManager().then(resolve), 100);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîß Initializing new registration system...');
    
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AuthManager
    await waitForAuthManager();
    console.log('‚úÖ AuthManager ready, starting registration system');
    
    window.registerManager = new RegisterManager();
});