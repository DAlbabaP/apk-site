// –°–∫—Ä–∏–ø—Ç—ã –∏–∑ products-api.html
// –ò–∑–≤–ª–µ—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - 2025-05-31 09:05
// –ü–æ–¥–∫–ª—é—á–∏—Ç–µ common.js –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç

// –ë–ª–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ #1
// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ API
        class ProductAPI {
            constructor() {
                this.products = this.loadProducts();
                this.sets = this.loadSets();
                this.init();
            }

            init() {
                this.initTabs();
                this.renderProducts();
                this.renderSets();
                this.renderProductSelectors();
                this.updateApiMethod();
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤
            initTabs() {
                document.querySelectorAll('.tab').forEach(tab => {
                    tab.addEventListener('click', () => {
                        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                        
                        tab.classList.add('active');
                        document.getElementById(tab.getAttribute('data-tab')).classList.add('active');
                    });
                });

                document.getElementById('apiMethod').addEventListener('change', () => {
                    this.updateApiMethod();
                });
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
            loadProducts() {
                try {
                    return JSON.parse(localStorage.getItem('agro_products') || '[]');
                } catch {
                    return [];
                }
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–æ–≤
            loadSets() {
                try {
                    return JSON.parse(localStorage.getItem('agro_sets') || '[]');
                } catch {
                    return [];
                }
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            saveProducts() {
                localStorage.setItem('agro_products', JSON.stringify(this.products));
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–≤
            saveSets() {
                localStorage.setItem('agro_sets', JSON.stringify(this.sets));
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            addProduct() {
                const product = {
                    id: this.generateId(),
                    name: document.getElementById('productName').value.trim(),
                    category: document.getElementById('productCategory').value,
                    storageTemp: parseInt(document.getElementById('storageTemp').value) || 0,
                    storageHumidity: parseInt(document.getElementById('storageHumidity').value) || 0,
                    shelfLife: parseInt(document.getElementById('shelfLife').value) || 0,
                    seasonality: document.getElementById('seasonality').value,
                    packaging: document.getElementById('packaging').value,
                    specialCare: document.getElementById('specialCare').value,
                    description: document.getElementById('productDescription').value.trim(),
                    createdAt: new Date().toISOString()
                };

                // –í–∞–ª–∏–¥–∞—Ü–∏—è
                if (!product.name || !product.category) {
                    this.showNotification('productNotification', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è', 'error');
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                if (this.products.some(p => p.name.toLowerCase() === product.name.toLowerCase())) {
                    this.showNotification('productNotification', '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
                    return;
                }

                this.products.push(product);
                this.saveProducts();
                this.renderProducts();
                this.renderProductSelectors();
                this.clearProductForm();
                this.showNotification('productNotification', '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            }

            // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ç–æ–≤–∞—Ä–∞
            clearProductForm() {
                document.getElementById('productName').value = '';
                document.getElementById('productCategory').value = '';
                document.getElementById('storageTemp').value = '';
                document.getElementById('storageHumidity').value = '';
                document.getElementById('shelfLife').value = '';
                document.getElementById('seasonality').value = '';
                document.getElementById('packaging').value = '';
                document.getElementById('specialCare').value = '';
                document.getElementById('productDescription').value = '';
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            renderProducts() {
                const container = document.getElementById('productsContainer');
                
                if (this.products.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="icon">üì¶</div>
                            <h4>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                    <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                    <th>–•—Ä–∞–Ω–µ–Ω–∏–µ</th>
                                    <th>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</th>
                                    <th>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${this.products.map(product => `
                                    <tr>
                                        <td><strong>${product.name}</strong></td>
                                        <td>${this.getCategoryName(product.category)}</td>
                                        <td>${product.storageTemp}¬∞C, ${product.storageHumidity}%</td>
                                        <td>${product.shelfLife} –¥–Ω–µ–π</td>
                                        <td>${this.getSeasonName(product.seasonality)}</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning" onclick="productAPI.editProduct('${product.id}')">
                                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                            </button>
                                            <button class="btn btn-sm btn-danger" onclick="productAPI.deleteProduct('${product.id}')">
                                                –£–¥–∞–ª–∏—Ç—å
                                            </button>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            deleteProduct(productId) {
                if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
                    this.products = this.products.filter(p => p.id !== productId);
                    this.saveProducts();
                    this.renderProducts();
                    this.renderProductSelectors();
                    this.showNotification('productNotification', '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
                }
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
            createSet() {
                const selectedProducts = Array.from(document.querySelectorAll('#setProductsSelector input[type="checkbox"]:checked'))
                    .map(checkbox => checkbox.value);

                const set = {
                    id: this.generateId(),
                    name: document.getElementById('setName').value.trim(),
                    type: document.getElementById('setType').value,
                    description: document.getElementById('setDescription').value.trim(),
                    products: selectedProducts,
                    createdAt: new Date().toISOString()
                };

                // –í–∞–ª–∏–¥–∞—Ü–∏—è
                if (!set.name || !set.type || selectedProducts.length === 0) {
                    this.showNotification('setNotification', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã', 'error');
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                const compatibilityCheck = this.checkProductsCompatibility(selectedProducts);
                if (compatibilityCheck.issues.length > 0) {
                    const confirmed = confirm(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:\n${compatibilityCheck.issues.join('\n')}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞?`);
                    if (!confirmed) return;
                }

                this.sets.push(set);
                this.saveSets();
                this.renderSets();
                this.clearSetForm();
                this.showNotification('setNotification', '–ù–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω', 'success');
            }

            // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞–±–æ—Ä–∞
            clearSetForm() {
                document.getElementById('setName').value = '';
                document.getElementById('setType').value = '';
                document.getElementById('setDescription').value = '';
                document.querySelectorAll('#setProductsSelector input[type="checkbox"]').forEach(cb => cb.checked = false);
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–≤
            renderSets() {
                const container = document.getElementById('setsContainer');
                
                if (this.sets.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="icon">üìã</div>
                            <h4>–ù–∞–±–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                            <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤</p>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                    <th>–¢–∏–ø</th>
                                    <th>–¢–æ–≤–∞—Ä–æ–≤</th>
                                    <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${this.sets.map(set => `
                                    <tr>
                                        <td><strong>${set.name}</strong></td>
                                        <td>${this.getSetTypeName(set.type)}</td>
                                        <td>${set.products.length}</td>
                                        <td>${set.description.substring(0, 50)}${set.description.length > 50 ? '...' : ''}</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning" onclick="productAPI.editSet('${set.id}')">
                                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                            </button>
                                            <button class="btn btn-sm btn-danger" onclick="productAPI.deleteSet('${set.id}')">
                                                –£–¥–∞–ª–∏—Ç—å
                                            </button>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
            deleteSet(setId) {
                if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –Ω–∞–±–æ—Ä?')) {
                    this.sets = this.sets.filter(s => s.id !== setId);
                    this.saveSets();
                    this.renderSets();
                    this.showNotification('setNotification', '–ù–∞–±–æ—Ä —É–¥–∞–ª–µ–Ω', 'success');
                }
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
            renderProductSelectors() {
                // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤
                const setSelector = document.getElementById('setProductsSelector');
                if (setSelector) {
                    if (this.products.length === 0) {
                        setSelector.innerHTML = '<p style="color: var(--gray-medium);">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>';
                    } else {
                        setSelector.innerHTML = this.products.map(product => `
                            <label style="display: flex; align-items: center; margin-bottom: 0.5rem; cursor: pointer;">
                                <input type="checkbox" value="${product.id}" style="margin-right: 0.5rem;">
                                <span>${product.name} (${this.getCategoryName(product.category)})</span>
                            </label>
                        `).join('');
                    }
                }

                // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                const compatibilitySelector = document.getElementById('compatibilitySelector');
                if (compatibilitySelector) {
                    if (this.products.length === 0) {
                        compatibilitySelector.innerHTML = '<p style="color: var(--gray-medium);">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>';
                    } else {
                        compatibilitySelector.innerHTML = this.products.map(product => `
                            <label style="display: flex; align-items: center; margin-bottom: 0.5rem; cursor: pointer;">
                                <input type="checkbox" value="${product.id}" style="margin-right: 0.5rem;">
                                <span>${product.name} (${this.getCategoryName(product.category)})</span>
                            </label>
                        `).join('');
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            checkCompatibility() {
                const selectedProducts = Array.from(document.querySelectorAll('#compatibilitySelector input[type="checkbox"]:checked'))
                    .map(checkbox => checkbox.value);

                if (selectedProducts.length < 2) {
                    this.showNotification('compatibilityResults', '–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'error', true);
                    return;
                }

                const result = this.checkProductsCompatibility(selectedProducts);
                this.displayCompatibilityResults(result);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
            checkProductsCompatibility(productIds) {
                const products = this.products.filter(p => productIds.includes(p.id));
                const issues = [];
                const warnings = [];

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è
                const tempRanges = products.map(p => p.storageTemp);
                const humidityRanges = products.map(p => p.storageHumidity);
                
                if (Math.max(...tempRanges) - Math.min(...tempRanges) > 10) {
                    issues.push('–†–∞–∑–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä–∞–∑–Ω–∏—Ü–∞ > 10¬∞C)');
                }

                if (Math.max(...humidityRanges) - Math.min(...humidityRanges) > 20) {
                    issues.push('–†–∞–∑–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (—Ä–∞–∑–Ω–∏—Ü–∞ > 20%)');
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏
                const packagingTypes = [...new Set(products.map(p => p.packaging).filter(Boolean))];
                const incompatiblePackaging = [
                    ['glass', 'metal'],
                    ['plastic', 'glass']
                ];

                incompatiblePackaging.forEach(([type1, type2]) => {
                    if (packagingTypes.includes(type1) && packagingTypes.includes(type2)) {
                        warnings.push(`–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —É–ø–∞–∫–æ–≤–∫–∏: ${type1} –∏ ${type2}`);
                    }
                });

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
                const seasons = [...new Set(products.map(p => p.seasonality).filter(Boolean))];
                if (seasons.length > 1 && !seasons.includes('year-round')) {
                    warnings.push('–¢–æ–≤–∞—Ä—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤');
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–æ–±—ã—Ö —É—Å–ª–æ–≤–∏–π
                const specialCares = [...new Set(products.map(p => p.specialCare).filter(Boolean))];
                const conflictingCares = [
                    ['refrigerated', 'dry'],
                    ['dark', 'ventilated']
                ];

                conflictingCares.forEach(([care1, care2]) => {
                    if (specialCares.includes(care1) && specialCares.includes(care2)) {
                        issues.push(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è: ${care1} –∏ ${care2}`);
                    }
                });

                return {
                    compatible: issues.length === 0,
                    issues,
                    warnings,
                    products
                };
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            displayCompatibilityResults(result) {
                const container = document.getElementById('compatibilityResults');
                
                let html = '<div style="margin-top: 2rem;">';
                html += '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</h4>';

                if (result.compatible && result.warnings.length === 0) {
                    html += '<div class="notification success">‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã</div>';
                } else {
                    if (result.issues.length > 0) {
                        html += '<div class="notification error">';
                        html += '<strong>‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:</strong><ul>';
                        result.issues.forEach(issue => html += `<li>${issue}</li>`);
                        html += '</ul></div>';
                    }

                    if (result.warnings.length > 0) {
                        html += '<div class="notification warning">';
                        html += '<strong>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</strong><ul>';
                        result.warnings.forEach(warning => html += `<li>${warning}</li>`);
                        html += '</ul></div>';
                    }
                }

                html += '<h5>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</h5>';
                html += '<div class="compatibility-grid">';
                result.products.forEach(product => {
                    html += `
                        <div class="compatibility-card">
                            <h6>${product.name}</h6>
                            <p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${product.storageTemp}¬∞C</p>
                            <p>–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${product.storageHumidity}%</p>
                            <p>–£–ø–∞–∫–æ–≤–∫–∞: ${this.getPackagingName(product.packaging)}</p>
                            <p>–°–µ–∑–æ–Ω: ${this.getSeasonName(product.seasonality)}</p>
                        </div>
                    `;
                });
                html += '</div></div>';

                container.innerHTML = html;
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ API
            updateApiMethod() {
                const method = document.getElementById('apiMethod').value;
                const endpoint = document.getElementById('apiEndpoint');
                const body = document.getElementById('apiBody');

                switch (method) {
                    case 'GET':
                        endpoint.value = '/api/products';
                        body.value = '';
                        body.disabled = true;
                        break;
                    case 'POST':
                        endpoint.value = '/api/products';
                        body.disabled = false;
                        body.value = JSON.stringify({
                            name: "–°–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∏—Ü—ã",
                            category: "seeds",
                            storageTemp: 15,
                            storageHumidity: 50,
                            shelfLife: 365,
                            seasonality: "spring",
                            packaging: "paper",
                            description: "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–º–µ–Ω–∞ –æ–∑–∏–º–æ–π –ø—à–µ–Ω–∏—Ü—ã"
                        }, null, 2);
                        break;
                    case 'PUT':
                        endpoint.value = '/api/products/{id}';
                        body.disabled = false;
                        body.value = JSON.stringify({
                            name: "–°–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∏—Ü—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)",
                            storageTemp: 18
                        }, null, 2);
                        break;
                    case 'DELETE':
                        endpoint.value = '/api/products/{id}';
                        body.value = '';
                        body.disabled = true;
                        break;
                }
            }

            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
            testAPI() {
                const method = document.getElementById('apiMethod').value;
                const endpoint = document.getElementById('apiEndpoint').value;
                const body = document.getElementById('apiBody').value;

                // –°–∏–º—É–ª—è—Ü–∏—è API –æ—Ç–≤–µ—Ç–∞
                let response;
                let status;

                switch (method) {
                    case 'GET':
                        status = 200;
                        response = {
                            success: true,
                            data: this.products,
                            total: this.products.length
                        };
                        break;
                    case 'POST':
                        try {
                            const newProduct = JSON.parse(body);
                            status = 201;
                            response = {
                                success: true,
                                message: "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                                data: { ...newProduct, id: this.generateId() }
                            };
                        } catch (e) {
                            status = 400;
                            response = {
                                success: false,
                                error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"
                            };
                        }
                        break;
                    case 'PUT':
                        status = 200;
                        response = {
                            success: true,
                            message: "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
                        };
                        break;
                    case 'DELETE':
                        status = 200;
                        response = {
                            success: true,
                            message: "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                        };
                        break;
                }

                this.displayAPIResponse(method, endpoint, status, response);
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API
            displayAPIResponse(method, endpoint, status, response) {
                const container = document.getElementById('apiResponse');
                
                const statusColor = status < 300 ? '#4CAF50' : status < 500 ? '#FF9800' : '#F44336';
                
                container.innerHTML = `
                    <div class="api-response">
                        <div style="margin-bottom: 1rem; color: #ffeb3b;">
                            <strong>${method} ${endpoint}</strong>
                        </div>
                        <div style="margin-bottom: 1rem; color: ${statusColor};">
                            Status: ${status}
                        </div>
                        <div style="color: #f8f8f2;">
                            <strong>Response:</strong><br>
                            <pre>${JSON.stringify(response, null, 2)}</pre>
                        </div>
                    </div>
                `;
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            generateSampleData() {
                const sampleProducts = [
                    {
                        id: this.generateId(),
                        name: "–°–µ–º–µ–Ω–∞ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞",
                        category: "seeds",
                        storageTemp: 15,
                        storageHumidity: 45,
                        shelfLife: 365,
                        seasonality: "spring",
                        packaging: "paper",
                        specialCare: "dry",
                        description: "–í—ã—Å–æ–∫–æ—É—Ä–æ–∂–∞–π–Ω—ã–π —Å–æ—Ä—Ç –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞",
                        createdAt: new Date().toISOString()
                    },
                    {
                        id: this.generateId(),
                        name: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ NPK",
                        category: "fertilizers",
                        storageTemp: 20,
                        storageHumidity: 40,
                        shelfLife: 730,
                        seasonality: "year-round",
                        packaging: "plastic",
                        specialCare: "dry",
                        description: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–∏–Ω–µ—Ä–∞–ª—å–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ",
                        createdAt: new Date().toISOString()
                    },
                    {
                        id: this.generateId(),
                        name: "–ì–µ—Ä–±–∏—Ü–∏–¥ —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞",
                        category: "pesticides",
                        storageTemp: 10,
                        storageHumidity: 60,
                        shelfLife: 1095,
                        seasonality: "spring",
                        packaging: "plastic",
                        specialCare: "dark",
                        description: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø—Ä–æ—Ç–∏–≤ —Å–æ—Ä–Ω—è–∫–æ–≤",
                        createdAt: new Date().toISOString()
                    }
                ];

                this.products = [...this.products, ...sampleProducts];
                this.saveProducts();
                this.renderProducts();
                this.renderProductSelectors();
                this.showNotification('productNotification', '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'success');
            }

            // –£—Ç–∏–ª–∏—Ç—ã
            generateId() {
                return 'prod_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }

            getCategoryName(category) {
                const categories = {
                    'seeds': '–°–µ–º–µ–Ω–∞',
                    'fertilizers': '–£–¥–æ–±—Ä–µ–Ω–∏—è',
                    'pesticides': '–ü–µ—Å—Ç–∏—Ü–∏–¥—ã',
                    'equipment': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
                    'feeds': '–ö–æ—Ä–º–∞'
                };
                return categories[category] || category;
            }

            getSeasonName(season) {
                const seasons = {
                    'spring': '–í–µ—Å–Ω–∞',
                    'summer': '–õ–µ—Ç–æ',
                    'autumn': '–û—Å–µ–Ω—å',
                    'winter': '–ó–∏–º–∞',
                    'year-round': '–ö—Ä—É–≥–ª—ã–π –≥–æ–¥'
                };
                return seasons[season] || season;
            }

            getPackagingName(packaging) {
                const packagings = {
                    'plastic': '–ü–ª–∞—Å—Ç–∏–∫',
                    'glass': '–°—Ç–µ–∫–ª–æ',
                    'metal': '–ú–µ—Ç–∞–ª–ª',
                    'paper': '–ë—É–º–∞–≥–∞',
                    'fabric': '–¢–∫–∞–Ω—å'
                };
                return packagings[packaging] || packaging;
            }

            getSetTypeName(type) {
                const types = {
                    'seasonal': '–°–µ–∑–æ–Ω–Ω—ã–π',
                    'functional': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π',
                    'promotional': '–ü—Ä–æ–º–æ-–Ω–∞–±–æ—Ä',
                    'starter': '–°—Ç–∞—Ä—Ç–æ–≤—ã–π'
                };
                return types[type] || type;
            }

            showNotification(containerId, message, type, useContainer = false) {
                const container = document.getElementById(containerId);
                const notification = `<div class="notification ${type}">${message}</div>`;
                
                if (useContainer) {
                    container.innerHTML = notification;
                } else {
                    container.innerHTML = notification;
                    setTimeout(() => {
                        container.innerHTML = '';
                    }, 5000);
                }
            }
        }

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function addProduct() {
            productAPI.addProduct();
        }

        function clearProductForm() {
            productAPI.clearProductForm();
        }

        function createSet() {
            productAPI.createSet();
        }

        function clearSetForm() {
            productAPI.clearSetForm();
        }

        function checkCompatibility() {
            productAPI.checkCompatibility();
        }

        function testAPI() {
            productAPI.testAPI();
        }

        function generateSampleData() {
            productAPI.generateSampleData();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        let productAPI;
        document.addEventListener('DOMContentLoaded', () => {
            productAPI = new ProductAPI();
        });
