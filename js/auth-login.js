/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 * –¢–æ–ª—å–∫–æ API, –±–µ–∑ localStorage
 * –°–æ–∑–¥–∞–Ω–æ: 2025-06-16
 */

class LoginManager {
    constructor() {
        this.form = null;
        this.isLoading = false;
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.form = document.getElementById('loginForm');
        if (!this.form) {
            console.error('Login form not found');
            return;
        }

        this.setupEventListeners();
        this.setupQuickLoginButtons();
        this.focusFirstField();
        this.checkExistingAuth();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));

        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        const loginField = document.getElementById('login');
        const passwordField = document.getElementById('password');

        if (loginField) {
            loginField.addEventListener('input', () => this.clearErrors());
            loginField.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    passwordField?.focus();
                }
            });
        }

        if (passwordField) {
            passwordField.addEventListener('input', () => this.clearErrors());
            passwordField.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.form.dispatchEvent(new Event('submit'));
                }
            });
        }
    }    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkExistingAuth() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        // —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ –ø–æ–¥ –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
        console.log('üîç Checking existing auth...');
        try {
            if (window.AuthManager && AuthManager.isAuthenticated()) {
                const user = AuthManager.getCurrentUser();
                console.log('‚ö†Ô∏è User already authenticated:', user?.username, 'role:', user?.role);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                this.showExistingAuthWarning(user);
            }
        } catch (error) {
            console.log('AuthManager not ready yet, skipping auth check');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    showExistingAuthWarning(user) {
        const warningHtml = `
            <div class="existing-auth-warning" style="
                margin-bottom: 20px; 
                padding: 15px; 
                background: linear-gradient(135deg, rgba(255, 152, 0, 0.1), rgba(255, 193, 7, 0.1)); 
                border: 1px solid rgba(255, 152, 0, 0.3);
                border-radius: 8px; 
                text-align: center;
            ">
                <h4 style="color: #F57C00; margin-bottom: 10px; font-size: 14px;">‚ö†Ô∏è –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</h4>
                <p style="margin: 5px 0; font-size: 13px;">
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <strong>${user.username}</strong> (${user.role})
                </p>
                <div style="margin-top: 10px;">
                    <button type="button" id="goToDashboard" style="
                        padding: 8px 16px; 
                        background: #4CAF50; 
                        color: white; 
                        border: none; 
                        border-radius: 4px; 
                        cursor: pointer; 
                        margin-right: 10px;
                        font-size: 12px;
                    ">
                        –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å
                    </button>
                    <button type="button" id="logoutAndStay" style="
                        padding: 8px 16px; 
                        background: #f44336; 
                        color: white; 
                        border: none; 
                        border-radius: 4px; 
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        –í—ã–π—Ç–∏
                    </button>
                </div>
            </div>
        `;
        
        this.form.insertAdjacentHTML('beforebegin', warningHtml);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        document.getElementById('goToDashboard')?.addEventListener('click', () => {
            this.redirectToUserDashboard(user.role);
        });
        
        document.getElementById('logoutAndStay')?.addEventListener('click', () => {
            AuthManager.logout();
            // –ü–æ—Å–ª–µ logout –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            window.location.reload();
        });
    }// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async handleSubmit(e) {
        e.preventDefault();
        e.stopPropagation();
        
        if (this.isLoading) {
            console.log('Login already in progress, ignoring submit');
            return;
        }

        const formData = this.getFormData();
        if (!this.validateFormData(formData)) return;

        await this.performLogin(formData);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    getFormData() {
        const formData = new FormData(this.form);
        return {
            login: formData.get('login')?.trim() || '',
            password: formData.get('password') || ''
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    validateFormData(data) {
        this.clearErrors();

        if (!data.login) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω');
            document.getElementById('login')?.focus();
            return false;
        }

        if (!data.password) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
            document.getElementById('password')?.focus();
            return false;
        }

        if (data.login.length < 2) {
            this.showError('–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            document.getElementById('login')?.focus();
            return false;
        }

        return true;
    }    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
    async performLogin(credentials) {
        this.setLoadingState(true);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å AuthManager
            if (!window.AuthManager) {
                throw new Error('–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            }

            console.log('üîê Attempting login for user:', credentials.login);
            
            const response = await AuthManager.login(credentials);
            
            console.log('‚úÖ Login successful:', {
                user: response.user.username,
                role: response.user.role,
                token: response.token ? 'received' : 'missing'
            });

            this.showSuccess('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            setTimeout(() => {
                console.log('üîÑ Starting redirect...');
                try {
                    this.redirectToUserDashboard(response.user.role);
                } catch (redirectError) {
                    console.error('‚ùå Redirect failed:', redirectError);
                    this.showError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.');
                }
            }, 1500);

        } catch (error) {
            console.error('‚ùå Login failed:', error.message);
            this.handleLoginError(error);
        } finally {
            this.setLoadingState(false);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤—Ö–æ–¥–∞
    handleLoginError(error) {
        let message = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É';

        if (error.message.includes('Invalid credentials')) {
            message = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
            // –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const passwordField = document.getElementById('password');
            if (passwordField) {
                passwordField.value = '';
                passwordField.focus();
            }
        } else if (error.message.includes('Network')) {
            message = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
        } else if (error.message.includes('Server')) {
            message = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        } else if (error.message) {
            message = error.message;
        }

        this.showError(message);
    }    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    redirectToUserDashboard(role) {
        const dashboardUrls = {
            'admin': 'dashboard-admin.html',
            'manager': 'dashboard-manager.html',
            'user': 'dashboard-user.html'
        };

        const targetUrl = dashboardUrls[role] || dashboardUrls.user;
        
        console.log('üîÑ Redirecting to:', targetUrl);
        window.location.href = targetUrl;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setLoadingState(loading) {
        this.isLoading = loading;
        
        const submitBtn = document.getElementById('submitBtn');
        const spinner = document.getElementById('loadingSpinner');
        
        if (submitBtn) {
            submitBtn.disabled = loading;
        }
        
        if (spinner) {
            spinner.style.display = loading ? 'inline-block' : 'none';
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError(message) {
        const errorElement = document.getElementById('loginError');
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            errorElement.classList.add('show');
        }

        // –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.Utils?.showNotification) {
            Utils.showNotification(message, 'error');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
    showSuccess(message) {
        if (window.Utils?.showNotification) {
            Utils.showNotification(message, 'success');
        }
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
    clearErrors() {
        const errorElement = document.getElementById('loginError');
        if (errorElement) {
            errorElement.style.display = 'none';
            errorElement.textContent = '';
            errorElement.classList.remove('show');
        }
    }

    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    focusFirstField() {
        setTimeout(() => {
            const loginField = document.getElementById('login');
            if (loginField) {
                loginField.focus();
            }
        }, 100);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
    setupQuickLoginButtons() {
        const quickLoginHtml = `
            <div class="demo-quick-login" style="
                margin-top: 20px; 
                padding: 15px; 
                background: linear-gradient(135deg, rgba(46, 125, 50, 0.05), rgba(76, 175, 80, 0.05)); 
                border: 1px solid rgba(46, 125, 50, 0.1);
                border-radius: 8px; 
                text-align: center;
            ">
                <h4 style="color: #2E7D32; margin-bottom: 10px; font-size: 14px;">üöÄ –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ (–¥–µ–º–æ)</h4>
                <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap; margin-bottom: 10px;">
                    <button type="button" class="quick-btn quick-admin" data-role="admin" style="
                        padding: 8px 16px; 
                        background: linear-gradient(135deg, #D32F2F, #F44336); 
                        color: white; 
                        border: none; 
                        border-radius: 6px; 
                        cursor: pointer; 
                        font-size: 12px; 
                        font-weight: 600;
                        transition: all 0.3s ease;
                        box-shadow: 0 2px 4px rgba(211, 47, 47, 0.3);
                    ">
                        üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                    </button>
                    <button type="button" class="quick-btn quick-manager" data-role="manager" style="
                        padding: 8px 16px; 
                        background: linear-gradient(135deg, #1976D2, #2196F3); 
                        color: white; 
                        border: none; 
                        border-radius: 6px; 
                        cursor: pointer; 
                        font-size: 12px; 
                        font-weight: 600;
                        transition: all 0.3s ease;
                        box-shadow: 0 2px 4px rgba(25, 118, 210, 0.3);
                    ">
                        üëî –ú–µ–Ω–µ–¥–∂–µ—Ä
                    </button>
                    <button type="button" class="quick-btn quick-user" data-role="user" style="
                        padding: 8px 16px; 
                        background: linear-gradient(135deg, #388E3C, #4CAF50); 
                        color: white; 
                        border: none; 
                        border-radius: 6px; 
                        cursor: pointer; 
                        font-size: 12px; 
                        font-weight: 600;
                        transition: all 0.3s ease;
                        box-shadow: 0 2px 4px rgba(56, 142, 60, 0.3);
                    ">
                        üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    </button>
                </div>
                <p style="font-size: 11px; color: #666; margin: 0;">–í—Å–µ –ø–∞—Ä–æ–ª–∏: <code>password</code></p>
            </div>
        `;

        this.form.insertAdjacentHTML('afterend', quickLoginHtml);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.quick-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const role = btn.dataset.role;
                this.quickLogin(role);
            });

            // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
            btn.addEventListener('mouseenter', () => {
                btn.style.transform = 'translateY(-2px)';
                btn.style.boxShadow = btn.style.boxShadow.replace('0 2px 4px', '0 4px 12px');
            });

            btn.addEventListener('mouseleave', () => {
                btn.style.transform = 'translateY(0)';
                btn.style.boxShadow = btn.style.boxShadow.replace('0 4px 12px', '0 2px 4px');
            });
        });
    }

    // –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥
    async quickLogin(role) {
        const credentials = {
            'admin': { login: 'admin', password: 'password' },
            'manager': { login: 'manager', password: 'password' },
            'user': { login: 'user', password: 'password' }
        };

        const creds = credentials[role];
        if (!creds) return;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        const loginField = document.getElementById('login');
        const passwordField = document.getElementById('password');

        if (loginField) loginField.value = creds.login;
        if (passwordField) passwordField.value = creds.password;

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
        await this.performLogin(creds);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
window.quickLogin = function(role) {
    if (window.loginManager) {
        window.loginManager.quickLogin(role);
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AuthManager
function waitForAuthManager() {
    return new Promise((resolve) => {
        if (window.AuthManager && window.api) {
            resolve();
        } else {
            console.log('‚è≥ Waiting for AuthManager...');
            setTimeout(() => waitForAuthManager().then(resolve), 100);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîß Initializing new login system...');
    
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AuthManager
    await waitForAuthManager();
    console.log('‚úÖ AuthManager ready, starting login system');
    
    window.loginManager = new LoginManager();
});