// –°–∫—Ä–∏–ø—Ç—ã –∏–∑ dashboard-manager.html
// –ò–∑–≤–ª–µ—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - 2025-05-31 09:05
// –ü–æ–¥–∫–ª—é—á–∏—Ç–µ common.js –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç

// –ë–ª–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ #1
// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        class ManagerDashboard {
            constructor() {
                this.currentUser = null;
                this.assignedRequests = [];
                this.currentRequest = null;
                this.uploadedFiles = [];
                this.init();
            }            async init() {
                this.checkAuth();
                this.loadUserData();
                await this.loadAssignedRequests();
                this.updateStats();
                this.initNavigation();
                this.initForms();
                this.initFileUpload();
                this.renderRecentRequests();
                this.initFilters();
            }// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            checkAuth() {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if (!window.AuthManager || !AuthManager.isAuthenticated()) {
                        console.log('‚ùå Manager not authenticated, redirecting to login');
                        window.location.href = 'login.html';
                        return;
                    }

                    const user = AuthManager.getCurrentUser();
                    if (!user) {
                        console.log('‚ùå No user data found, redirecting to login');
                        window.location.href = 'login.html';
                        return;
                    }

                    if (user.role !== 'manager') {
                        console.log('‚ùå User is not manager, redirecting to appropriate dashboard');
                        const dashboards = {
                            'user': 'dashboard-user.html',
                            'admin': 'dashboard-admin.html'
                        };
                        if (dashboards[user.role]) {
                            window.location.href = dashboards[user.role];
                        }
                        return;
                    }

                    console.log('‚úÖ Manager user authenticated:', user.username);
                    this.currentUser = user;                } catch (error) {
                    console.error('‚ùå Auth check error:', error);
                    window.location.href = 'login.html';
                }
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async loadUserData() {
                if (!this.currentUser) return;

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                let user = this.currentUser;
                console.log('üìã Loading user data:', user);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –ø—Ä–æ—Ñ–∏–ª—è
                try {
                    if (window.api && window.api.users && window.api.users.getProfile) {
                        console.log('üîÑ Loading user profile via API...');
                        const profileResponse = await window.api.users.getProfile();
                        if (profileResponse.success && profileResponse.user) {
                            console.log('üìã Full user profile loaded:', profileResponse.user);
                            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            Object.assign(this.currentUser, profileResponse.user);
                            user = this.currentUser;
                        }
                    }
                } catch (error) {
                    console.warn('Could not load user profile:', error);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —à–∞–ø–∫–µ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
                const displayName = user.full_name || (user.first_name && user.last_name ? 
                    `${user.first_name} ${user.last_name}` : user.username) || '–ú–µ–Ω–µ–¥–∂–µ—Ä';
                
                const setElementText = (id, value) => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.textContent = value;
                        console.log(`‚úÖ Updated header ${id} = "${value}"`);
                    }
                };

                setElementText('userName', displayName);
                setElementText('userRole', '–ú–µ–Ω–µ–¥–∂–µ—Ä');
                
                const avatarElement = document.getElementById('userAvatar');
                if (avatarElement) {
                    avatarElement.textContent = displayName.charAt(0).toUpperCase();
                }

                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
                const setFieldValue = (id, value) => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.value = value || '';
                        console.log(`‚úÖ Set ${id} = "${value}"`);
                    } else {
                        console.warn(`‚ùå Element ${id} not found`);
                    }
                };

                setFieldValue('profileFullName', user.full_name || (user.first_name && user.last_name ? 
                    `${user.first_name} ${user.last_name}` : user.username));
                setFieldValue('profileLogin', user.username);
                setFieldValue('profilePhone', user.phone);
                setFieldValue('profileEmail', user.email);
                setFieldValue('profileDepartment', user.department);                setFieldValue('profilePosition', user.position);
                setFieldValue('profilePositionCode', user.position_code);
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            async loadAssignedRequests() {
                try {
                    console.log('üîÑ Loading assigned requests via API...');
                    
                    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
                    let retries = 0;
                    while ((!window.api || !window.api.applications) && retries < 50) {
                        console.log('‚è≥ Waiting for API to be ready...');
                        await new Promise(resolve => setTimeout(resolve, 100));
                        retries++;
                    }
                    
                    if (!window.api || !window.api.applications) {
                        console.error('‚ùå API not available after waiting');
                        this.assignedRequests = [];
                        return;
                    }

                    const response = await window.api.applications.getAll();
                    
                    if (response.success && response.applications) {
                        // –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ
                        this.assignedRequests = response.applications.filter(req => 
                            req.assigned_manager_id == this.currentUser.id || !req.assigned_manager_id
                        );
                        console.log('‚úÖ Assigned requests loaded:', this.assignedRequests.length);
                    } else {
                        console.error('‚ùå Failed to load requests:', response.error);
                        this.assignedRequests = [];
                    }
                } catch (error) {
                    console.error('‚ùå Error loading assigned requests:', error);
                    this.assignedRequests = [];
                }
            }// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            updateStats() {
                const total = this.assignedRequests.length;
                const pending = this.assignedRequests.filter(req => 
                    ['pending', 'in_progress'].includes(req.status)
                ).length;
                const completed = this.assignedRequests.filter(req => 
                    req.status === 'completed'
                ).length;
                const urgent = this.assignedRequests.filter(req => 
                    ['high', 'urgent'].includes(req.priority) && req.status !== 'completed'
                ).length;

                const setStatValue = (id, value) => {
                    const element = document.getElementById(id);
                    if (element) element.textContent = value;
                };

                setStatValue('totalAssignedRequests', total);
                setStatValue('pendingRequests', pending);
                setStatValue('completedRequests', completed);
                setStatValue('urgentRequests', urgent);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            initNavigation() {
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const page = link.getAttribute('data-page');
                        if (page) {
                            this.showPage(page);
                        }
                    });
                });
            }

            // –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            showPage(pageId) {
                document.querySelectorAll('.page-section').forEach(section => {
                    section.classList.remove('active');
                });

                const targetPage = document.getElementById(pageId);
                if (targetPage) {
                    targetPage.classList.add('active');
                }

                document.querySelectorAll('.nav-link').forEach(link => {
                    link.classList.remove('active');
                });

                const activeLink = document.querySelector(`[data-page="${pageId}"]`);
                if (activeLink && activeLink.classList.contains('nav-link')) {
                    activeLink.classList.add('active');
                }

                if (pageId === 'requests') {
                    this.renderAllRequests();
                }
            }            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
            initForms() {
                const profileForm = document.getElementById('profileForm');
                if (profileForm) {
                    profileForm.addEventListener('submit', (e) => {
                        this.handleProfileUpdate(e);
                    });
                }

                const requestStatus = document.getElementById('requestStatus');
                if (requestStatus) {
                    requestStatus.addEventListener('change', (e) => {
                        const fileUploadGroup = document.getElementById('fileUploadGroup');
                        if (fileUploadGroup) {
                            if (e.target.value === 'completed') {
                                fileUploadGroup.style.display = 'block';
                            } else {
                                fileUploadGroup.style.display = 'none';
                            }
                        }
                    });
                }
            }            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            initFileUpload() {
                const fileUpload = document.getElementById('fileUpload');
                const fileInput = document.getElementById('fileInput');

                if (!fileUpload || !fileInput) return;

                fileUpload.addEventListener('click', () => fileInput.click());
                fileInput.addEventListener('change', (e) => this.handleFileSelect(e.target.files));

                // Drag & Drop
                fileUpload.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    fileUpload.classList.add('dragover');
                });

                fileUpload.addEventListener('dragleave', () => {
                    fileUpload.classList.remove('dragover');
                });

                fileUpload.addEventListener('drop', (e) => {
                    e.preventDefault();
                    fileUpload.classList.remove('dragover');
                    this.handleFileSelect(e.dataTransfer.files);
                });
            }// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            initFilters() {
                ['statusFilter', 'priorityFilter', 'dateFilter'].forEach(filterId => {
                    const element = document.getElementById(filterId);
                    if (element) {
                        element.addEventListener('change', () => {
                            this.renderAllRequests();
                        });
                    }
                });
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            handleFileSelect(files) {
                Array.from(files).forEach(file => {
                    if (file.size > 10 * 1024 * 1024) { // 10MB limit
                        this.showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)', 'error');
                        return;
                    }

                    this.uploadedFiles.push({
                        name: file.name,
                        size: file.size,
                        type: file.type,
                        data: file
                    });
                });

                this.renderUploadedFiles();
            }            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            renderUploadedFiles() {
                const container = document.getElementById('uploadedFiles');
                if (!container) return;
                
                container.innerHTML = this.uploadedFiles.map((file, index) => `
                    <div class="file-item">
                        <span>${file.name} (${this.formatFileSize(file.size)})</span>
                        <button class="file-remove" onclick="managerDashboard.removeFile(${index})">√ó</button>
                    </div>
                `).join('');
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            removeFile(index) {
                this.uploadedFiles.splice(index, 1);
                this.renderUploadedFiles();
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            async handleProfileUpdate(e) {
                e.preventDefault();
                
                console.log('üìù Updating profile...');
                
                const formData = new FormData(e.target);
                const updatedData = {
                    full_name: formData.get('profileFullName'),
                    phone: formData.get('profilePhone'),
                    email: formData.get('profileEmail'),
                    department: formData.get('profileDepartment'),
                    position: formData.get('profilePosition'),
                    position_code: formData.get('profilePositionCode')
                };

                console.log('üìù Updated data:', updatedData);                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (window.api && window.api.users && window.api.users.updateProfile) {
                        console.log('üîÑ Calling API to update profile...');
                        const response = await window.api.users.updateProfile(updatedData);
                        if (response.success) {
                            console.log('‚úÖ Profile updated via API');
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                            if (response.user) {
                                Object.assign(this.currentUser, response.user);
                            } else {
                                Object.assign(this.currentUser, updatedData);
                            }
                        } else {
                            console.warn('‚ùå API update failed:', response.error);
                            throw new Error(response.error || 'Failed to update profile');
                        }
                    } else {
                        console.log('‚ö†Ô∏è API update not available, updating locally');
                        Object.assign(this.currentUser, updatedData);
                    }
                      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await this.loadUserData();
                    
                    this.showNotification('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
                } catch (error) {
                    console.error('‚ùå Error updating profile:', error);
                    this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message, 'error');
                }
            }// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
            renderRecentRequests() {
                const container = document.getElementById('recentRequestsContainer');
                if (!container) return;
                
                const recentRequests = this.assignedRequests
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 5);

                if (recentRequests.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="icon">üì≠</div>
                            <h4>–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</h4>
                            <p>–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <table class="requests-table">
                            <thead>
                                <tr>
                                    <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                                    <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–î–∞—Ç–∞</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${recentRequests.map(req => `
                                    <tr>
                                        <td><strong>${req.title}</strong></td>
                                        <td><span class="priority-badge priority-${req.priority}">${this.getPriorityName(req.priority)}</span></td>
                                        <td><span class="status-badge status-${req.status}">${this.getStatusName(req.status)}</span></td>
                                        <td>${new Date(req.created_at).toLocaleDateString('ru-RU')}</td>
                                        <td>
                                            <button class="btn btn-primary btn-sm" onclick="managerDashboard.openRequestModal('${req.id}')">
                                                –û–±—Ä–∞–±–æ—Ç–∞—Ç—å
                                            </button>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            }            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            renderAllRequests() {
                const container = document.getElementById('requestsContainer');
                if (!container) return;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                let filteredRequests = [...this.assignedRequests];
                
                const statusFilter = document.getElementById('statusFilter')?.value;
                if (statusFilter) {
                    filteredRequests = filteredRequests.filter(req => req.status === statusFilter);
                }

                const priorityFilter = document.getElementById('priorityFilter')?.value;
                if (priorityFilter) {
                    filteredRequests = filteredRequests.filter(req => req.priority === priorityFilter);
                }

                const dateFilter = document.getElementById('dateFilter')?.value;
                if (dateFilter) {
                    const now = new Date();
                    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    
                    filteredRequests = filteredRequests.filter(req => {
                        const reqDate = new Date(req.created_at);
                        switch (dateFilter) {
                            case 'today':
                                return reqDate >= today;
                            case 'week':
                                const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
                                return reqDate >= weekAgo;
                            case 'month':
                                const monthAgo = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
                                return reqDate >= monthAgo;
                            default:
                                return true;
                        }
                    });
                }

                if (filteredRequests.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="icon">üì≠</div>
                            <h4>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</h4>
                            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞</p>
                        </div>
                    `;
                } else {
                    const sortedRequests = filteredRequests.sort((a, b) => {
                        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –∏ –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ
                        const statusOrder = { 'pending': 0, 'in_progress': 1, 'completed': 2, 'cancelled': 3 };
                        const priorityOrder = { 'urgent': 0, 'high': 1, 'medium': 2, 'low': 3 };
                        
                        if (statusOrder[a.status] !== statusOrder[b.status]) {
                            return statusOrder[a.status] - statusOrder[b.status];
                        }
                        
                        if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                            return priorityOrder[a.priority] - priorityOrder[b.priority];
                        }
                        
                        return new Date(b.created_at) - new Date(a.created_at);
                    });

                    container.innerHTML = `
                        <table class="requests-table">
                            <thead>
                                <tr>
                                    <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                                    <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                    <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${sortedRequests.map(req => `
                                    <tr>
                                        <td><strong>${req.title}</strong></td>
                                        <td><span class="category-badge category-${req.category || 'other'}">${this.getCategoryName(req.category)}</span></td>
                                        <td><span class="priority-badge priority-${req.priority}">${this.getPriorityName(req.priority)}</span></td>
                                        <td><span class="status-badge status-${req.status}">${this.getStatusName(req.status)}</span></td>
                                        <td>${new Date(req.created_at).toLocaleDateString('ru-RU')}</td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-primary btn-sm" onclick="managerDashboard.openRequestModal('${req.id}')">
                                                    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            }            // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞—è–≤–∫–∏
            async openRequestModal(requestId) {
                const request = this.assignedRequests.find(req => req.id == requestId);
                if (!request) return;

                this.currentRequest = request;
                this.uploadedFiles = [];

                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API
                    let userName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    if (request.user_id && window.api && window.api.users) {
                        try {
                            const userResponse = await window.api.users.getAll();
                            if (userResponse.success && userResponse.users) {
                                const user = userResponse.users.find(u => u.id == request.user_id);
                                if (user) {
                                    userName = user.full_name || 
                                        (user.first_name && user.last_name ? 
                                            `${user.first_name} ${user.last_name}` : user.username) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                                }
                            }
                        } catch (e) {
                            console.warn('Could not load user info:', e);
                        }
                    }

                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                    const detailsContainer = document.getElementById('requestDetails');
                    if (detailsContainer) {
                        detailsContainer.innerHTML = `
                            <div style="margin-bottom: 1.5rem; padding: 1rem; background: var(--background-color); border-radius: var(--border-radius);">
                                <h4>${request.title}</h4>
                                <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${this.getCategoryName(request.category)}</p>
                                <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${this.getPriorityName(request.priority)}</p>
                                <p><strong>–ó–∞—è–≤–∏—Ç–µ–ª—å:</strong> ${userName}</p>
                                <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${new Date(request.created_at).toLocaleDateString('ru-RU')}</p>
                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong></p>
                                <p style="white-space: pre-wrap;">${request.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                            </div>
                        `;
                    }

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                    const statusSelect = document.getElementById('requestStatus');
                    if (statusSelect) {
                        statusSelect.value = request.status;
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
                    const fileUploadGroup = document.getElementById('fileUploadGroup');
                    if (fileUploadGroup) {
                        fileUploadGroup.style.display = request.status === 'completed' ? 'block' : 'none';
                    }

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    this.renderComments();

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    const modal = document.getElementById('requestModal');
                    if (modal) {
                        modal.classList.add('show');
                    }
                } catch (error) {
                    console.error('Error opening request modal:', error);
                    this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏', 'error');
                }
            }            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            renderComments() {
                const container = document.getElementById('commentsSection');
                if (!container) return;
                
                const comments = this.currentRequest.comments || [];

                if (comments.length === 0) {
                    container.innerHTML = '<p style="color: var(--gray-medium); text-align: center;">–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</p>';
                } else {
                    container.innerHTML = comments.map(comment => {
                        const userName = comment.user_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                        return `
                            <div class="comment">
                                <div class="comment-header">
                                    <span class="comment-author">${userName}</span>
                                    <span class="comment-date">${new Date(comment.created_at).toLocaleString('ru-RU')}</span>
                                </div>
                                <div class="comment-text">${comment.message}</div>
                            </div>
                        `;
                    }).join('');
                }
            }            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            async saveRequest() {
                const statusSelect = document.getElementById('requestStatus');
                const commentInput = document.getElementById('newComment');
                
                if (!statusSelect || !this.currentRequest) {
                    this.showNotification('–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞', 'error');
                    return;
                }

                const status = statusSelect.value;
                const comment = commentInput ? commentInput.value.trim() : '';

                try {
                    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å API-–≤—ã–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
                    console.log('Saving request:', {
                        id: this.currentRequest.id,
                        status: status,
                        comment: comment,
                        files: this.uploadedFiles
                    });

                    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ API
                    const requestIndex = this.assignedRequests.findIndex(req => req.id == this.currentRequest.id);
                    if (requestIndex !== -1) {
                        this.assignedRequests[requestIndex].status = status;
                        this.assignedRequests[requestIndex].updated_at = new Date().toISOString();

                        if (status === 'completed') {
                            this.assignedRequests[requestIndex].completed_at = new Date().toISOString();
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ª–æ–∫–∞–ª—å–Ω–æ
                        if (comment) {
                            if (!this.assignedRequests[requestIndex].comments) {
                                this.assignedRequests[requestIndex].comments = [];
                            }

                            this.assignedRequests[requestIndex].comments.push({
                                id: this.generateId(),
                                user_id: this.currentUser.id,
                                user_name: this.currentUser.full_name || 
                                    (this.currentUser.first_name && this.currentUser.last_name ? 
                                        `${this.currentUser.first_name} ${this.currentUser.last_name}` : 
                                        this.currentUser.username),
                                message: comment,
                                type: 'manager',
                                created_at: new Date().toISOString()
                            });
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ
                        if (this.uploadedFiles.length > 0) {
                            if (!this.assignedRequests[requestIndex].files) {
                                this.assignedRequests[requestIndex].files = [];
                            }

                            this.uploadedFiles.forEach(file => {
                                this.assignedRequests[requestIndex].files.push({
                                    name: file.name,
                                    size: file.size,
                                    type: file.type,
                                    uploaded_by: this.currentUser.id,
                                    uploaded_at: new Date().toISOString()
                                });
                            });
                        }
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    this.updateStats();
                    this.renderRecentRequests();
                    this.renderAllRequests();

                    this.showNotification('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
                    this.closeModal();

                } catch (error) {
                    console.error('Error saving request:', error);
                    this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏', 'error');
                }
            }            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            closeModal() {
                const modal = document.getElementById('requestModal');
                if (modal) {
                    modal.classList.remove('show');
                }
                
                const commentInput = document.getElementById('newComment');
                if (commentInput) {
                    commentInput.value = '';
                }
                
                this.uploadedFiles = [];
                this.renderUploadedFiles();
                this.currentRequest = null;
            }

            // –£—Ç–∏–ª–∏—Ç—ã
            generateId() {
                return 'comment_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }            getCategoryName(category) {
                const categories = {
                    'seeds': '–°–µ–º–µ–Ω–∞',
                    'fertilizers': '–£–¥–æ–±—Ä–µ–Ω–∏—è',
                    'equipment': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
                    'consultation': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
                    'other': '–ü—Ä–æ—á–µ–µ'
                };
                return categories[category] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            }

            getPriorityName(priority) {
                const priorities = {
                    'low': '–ù–∏–∑–∫–∏–π',
                    'medium': '–°—Ä–µ–¥–Ω–∏–π',
                    'high': '–í—ã—Å–æ–∫–∏–π',
                    'urgent': '–°—Ä–æ—á–Ω—ã–π'
                };
                return priorities[priority] || priority;
            }

            getStatusName(status) {
                const statuses = {
                    'pending': '–û–∂–∏–¥–∞–µ—Ç',
                    'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
                    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
                };
                return statuses[status] || status;
            }

            showNotification(message, type = 'success') {
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.textContent = message;
                notification.style.position = 'fixed';
                notification.style.top = '2rem';
                notification.style.right = '2rem';
                notification.style.padding = '1rem 1.5rem';
                notification.style.borderRadius = 'var(--border-radius)';
                notification.style.color = 'var(--white)';
                notification.style.fontWeight = '500';
                notification.style.boxShadow = 'var(--shadow)';
                notification.style.zIndex = '1000';
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                notification.style.transition = 'all 0.3s ease';
                notification.style.background = type === 'success' ? 'var(--success-color)' : 'var(--error-color)';

                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.style.opacity = '1';
                    notification.style.transform = 'translateX(0)';
                }, 100);

                setTimeout(() => {
                    notification.style.opacity = '0';
                    notification.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 300);
                }, 4000);
            }
        }        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function logout() {
            console.log('üö™ Manager logging out...');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (window.AuthManager) {
                AuthManager.logout();
            } else {
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                localStorage.removeItem('auth_token');
                localStorage.removeItem('currentSession');
                sessionStorage.removeItem('isLoggedIn');
                window.location.href = 'login.html';
            }
        }

        function closeModal() {
            managerDashboard.closeModal();
        }

        function saveRequest() {
            managerDashboard.saveRequest();
        }        // –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AuthManager –∏ API
        function waitForAuthManager() {
            return new Promise((resolve) => {
                function checkReady() {
                    console.log('üîç Checking API readiness...', {
                        AuthManager: !!window.AuthManager,
                        api: !!window.api,
                        applications: !!(window.api && window.api.applications),
                        users: !!(window.api && window.api.users)
                    });
                    
                    if (window.AuthManager && window.api && window.api.applications && window.api.users) {
                        console.log('‚úÖ All APIs ready');
                        resolve();
                    } else {
                        setTimeout(checkReady, 100);
                    }
                }
                checkReady();
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        let managerDashboard;
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('üîß ManagerDashboard initializing...');
            
            // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AuthManager –∏ API
            await waitForAuthManager();
            console.log('‚úÖ AuthManager and API ready, starting ManagerDashboard');
            
            managerDashboard = new ManagerDashboard();
        });
